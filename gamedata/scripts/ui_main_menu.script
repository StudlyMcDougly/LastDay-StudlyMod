--==============( Edited by Tronex || last edit 2018/2/18 || comments with -->> are the edited part )==============--

-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Last edit:	10.01.2015
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9



local SKIP_FACTION_SELECTION = false -- TRUE to disable faction selection menu and start normally



class "main_menu" (CUIScriptWnd)
function main_menu:__init() super()
	math.randomseed(device():time_global())
	self.mbox_mode = 0
    self:InitControls()
    self:InitCallBacks()
	SendScriptCallback("main_menu_on_init",self)
	if not (level.present()) then
		xrs_debug_tools.on_game_start()
	end
end

function main_menu:__finalize()
end

function main_menu:InitControls()
	self:SetWndRect					(Frect():set(0,0,1024,768))

    local xml						= CScriptXmlInit()
    xml:ParseFile					("ui_mm_main.xml")

    xml:InitStatic					("background", self)
    self.shniaga					= xml:InitMMShniaga("shniaga_wnd",self);

	self.message_box				= CUIMessageBoxEx()
	self:Register					(self.message_box, "msg_box")

	local _ver = xml:InitStatic		("static_version",self)
	local mm						= _G.main_menu.get_main_menu()
	_ver:TextControl():SetTextColor (GetARGB(190, 190, 190, 190))
	_ver:TextControl():SetText		("Last Day 1.3")
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end


function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game,		self)
	self:AddCallback("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game,		self)
	self:AddCallback("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game,		self)
	self:AddCallback("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game,		self)
	self:AddCallback("btn_spawn",		ui_events.BUTTON_CLICKED,				self.OnButton_load_spawn,			self)
	-- options
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked,		self)
    -- AtmosFear options
	self:AddCallback("btn_af_options",  ui_events.BUTTON_CLICKED,				self.OnButton_af_options_clicked,	self)
	-- end AtmosFear options
	-- load
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked,			self)
	-- save
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked,			self)

	-- quit
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked,			self)
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game,			self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked,		self)
	-- message box
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame,				self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin,				self)

	self:Register(self, "self")
	self:AddCallback("self",	ui_events.MAIN_MENU_RELOADED, self.OnMenuReloaded, self)
end
function main_menu:OnMsgOk()
	if (self.mbox_mode == 2) then
		local console = get_console()
		console:execute("quit")
	end
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:OnMsgYes()

	if 	self.mbox_mode == 1 then
		self:LoadLastSave()
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	local					console = get_console()
	console:execute			("main_menu off")
	console:execute			("load_last_save")
end

function main_menu:OnButton_last_save()	

    if ( alife() == nil) then
        local flist = getFS():file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*"..".scop")
        flist:Sort(FS.FS_sort_by_modif_down)
        local file = flist:GetAt(0)
		if not (file) then 
			return
		end
        local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - string.len(".scop")))
       
        local console = get_console()
        console:execute("main_menu off")
        console:execute("start server("..file_name.."/single/alife/load) client(localhost)")
        return
    end
 
    if ( (db.actor ~= nil) and (db.actor:alive() == false) ) then
        self:LoadLastSave   ()
        return
    end
 
    self.mbox_mode          = 1
    self.message_box:InitMessageBox ("message_box_confirm_load_save")
    self.message_box:ShowDialog(true)
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:InitMessageBox("message_box_quit_windows")
	self.message_box:ShowDialog(true)
end

function main_menu:OnButton_disconnect_clicked()

	self.message_box:InitMessageBox("message_box_quit_game")

	if (level.game_id() ~= 1) then
		self.message_box:SetText("ui_mm_disconnect_message")	-- MultiPlayer
	else
		self.message_box:SetText("ui_mm_quit_game_message")		-- SinglePlayer
	end
	self.message_box:ShowDialog(true)
end

function main_menu:OnMessageQuitGame()
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	local console = get_console()
	console:execute("quit")
end

function main_menu:OnButton_return_game()
	lanforse_extra.rebind_savescum()
	
	local console = get_console()
	console:execute("main_menu off")
	SendScriptCallback("main_menu_on_quit",self)
end

function main_menu:OnButton_new_novice_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_novice")
	self:ShowFactionUI()
end

function main_menu:OnButton_new_stalker_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_stalker")
	self:ShowFactionUI()
end

function main_menu:OnButton_new_veteran_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_master")
	self:ShowFactionUI()
end

function main_menu:OnButton_new_master_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_master")
	self:ShowFactionUI()
end

local faction_ui
function main_menu:ShowFactionUI()
	if (SKIP_FACTION_SELECTION) then 
		self:StartGame() 
		return 
	end
	if not (faction_ui) then
		faction_ui = ui_mm_faction_select and ui_mm_faction_select.faction_ui(self)
	end

	if (faction_ui) then
		faction_ui:ShowDialog(true)
		self:HideDialog()
		self:Show(false)
	end
end 

function main_menu:StartGame()
	local console = get_console()
	if (alife() ~= nil) then
		console:execute	("disconnect")
	end
	device():pause(false)
	console:execute("start server(all/single/alife/new) client(localhost)")
	console:execute("main_menu off")
end

function main_menu:OnButton_load_spawn()
	if self.spawn_dlg == nil then
		self.spawn_dlg = ui_spawn_dialog.spawn_dialog()
		self.spawn_dlg.owner = self
	end

	self.spawn_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

function main_menu:OnButton_save_clicked()
	
	-->> Part added
	if (not trx_hardcore_save.save_check_conditions("save")) or (not trx_hardcore_save.save_check_campfire("save")) or (not trx_hardcore_save.save_check_timer ("save")) then
		return
	end

	if self.save_dlg == nil then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end

	self.save_dlg:FillList()
	self.save_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if self.opt_dlg == nil then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self.opt_dlg:SetCurrentValues()
	self.opt_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

-- AtmosFear options dialog
function main_menu:OnButton_af_options_clicked()
	if self.af_opt_dlg == nil then
		self.af_opt_dlg = atmosfear_options.af_options_dialog()
		self.af_opt_dlg.owner = self
	end

	self.af_opt_dlg:SetCurrentValues()
	self.af_opt_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end
-- End AtmosFear options dialog
function main_menu:OnButton_load_clicked()
	
	-->> Part added
	--if not trx_hardcore_save.save_check_conditions("load") then
		--return
	--end
	--if not trx_hardcore_save.save_check_campfire("load") then
		--return
	--end

	if self.load_dlg ==nil then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end

	self.load_dlg:FillList()
	self.load_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

function main_menu:Dispatch(cmd, param)  --virtual function
	if cmd == 2 then
		self:OnButton_multiplayer_clicked()
	end
	return true
end

function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	local bind = dik_to_bind(dik)
	local console = get_console()

	SendScriptCallback("main_menu_on_keyboard",dik,keyboard_action,self,level.present())

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if (level.present()) then 
			if (dik == DIK_keys.DIK_ESCAPE) then
				if (db.actor and db.actor:alive()) or (IsGameTypeSingle() ~= true) then
					self.OnButton_return_game()
				end
				return true
			elseif (bind == key_bindings.kQUICK_SAVE) then
				level_input.action_quick_save()
				return true
			elseif (bind == key_bindings.kQUICK_LOAD) then 
				level_input.action_quick_load()
				return true
			end
		end
		
		-->> F6 in menu = Hardsave (script originally made by NamelessWanderer)
		if dik == DIK_keys.DIK_F6 then
			
			if level.present() and (db.actor ~= nil) and db.actor:alive() and trx_hardcore_save.save_check_conditions("save") and trx_hardcore_save.save_check_campfire("save") and trx_hardcore_save.save_check_timer("save") then
				local console = get_console()
				local Y, M, D, h
				Y, M, D, h = game.get_game_time():get(Y, M, D, h)
				local s_level = level.name()
				--- Ooo shiny....
				if s_level == "l03_agroprom" then s_level = "Agroprom" end
				if s_level == "l03u_agr_underground" then s_level = "Agroprom Underground" end
				if s_level == "l07_military" then s_level = "Army Warehouses" end
				if s_level == "l12_stancia_2" then s_level = "Chernobyl NPP North" end
				if s_level == "l12_stancia" then s_level = "Chernobyl NPP South" end
				if s_level == "l01_escape" then s_level = "Cordon" end
				if s_level == "l04_darkvalley" then s_level = "Dark Valley" end
				if s_level == "k01_darkscape" then s_level = "Darkscape" end
				if s_level == "l09_deadcity" then s_level = "Dead City" end
				if s_level == "l11_hospital" then s_level = "Deserted Hospital" end
				if s_level == "l02_garbage" then s_level = "Garbage" end
				if s_level == "l13_generators" then s_level = "Generators" end
				if s_level == "k00_marsh" then s_level = "Great Swamp" end
				-- No changes for jupiter
				if s_level == "jupiter_underground" then s_level = "Jupiter Underground" end
				if s_level == "l08u_brainlab" then s_level = "Lab X-16" end
				if s_level == "l04u_labx18" then s_level = "Lab X-18" end
				if s_level == "l10u_bunker" then s_level = "Lab X-19" end
				if s_level == "labx8" then s_level = "Lab X-8" end
				if s_level == "l10_limansk" then s_level = "Limansk" end
				if s_level == "l12u_control_monolith" then s_level = "Monolith Control Center" end
				if s_level == "l13u_warlab" then s_level = "Monolith War Lab" end
				if s_level == "pripyat" then s_level = "Pripyat Outskirts" end
				if s_level == "l11_pripyat" then s_level = "Pripyat" end
				if s_level == "l10_radar" then s_level = "Radar" end
				if s_level == "l10_red_forest" then s_level = "Red Forest" end
				if s_level == "l05_bar" then s_level = "Rostok" end
				if s_level == "l12u_sarcofag" then s_level = "Sarcophagus" end
				if s_level == "k02_trucks_cemetery" then s_level = "Truck Cemetery" end
				if s_level == "l06_rostok" then s_level = "Wild Territory" end
				if s_level == "l08_yantar" then s_level = "Yantar" end
				-- No changes for zaton
				--- Carry on son
--				local actor_class = axr_misery.ActorClass
				m = level.get_time_minutes()
				if m < 10 then
					m = ("0"..m)
				end
				console:execute("main_menu off")
				console:execute("save "..s_level.." "..string.format("%d.%d.%d %d-%d", D, M, Y, h, m))
--				console:execute("save "..actor_class.." "..s_level.." "..string.format("%d.%d.%d %d-%d", D, M, Y, h, m))
				if ((axr_main.config:r_value("mm_options","trx_save_on_timer",2) or "off") ~= "off") then
					trx_hardcore_save.timer_reset()
				end
			end
		end
		
		if (dik == DIK_keys.DIK_Q) then
			self:OnMessageQuitWin()
		elseif (dik == DIK_keys.DIK_NUMPAD0) then
			if (reload_system_ini) then
				reload_system_ini()
				clear_ini_cache(system_ini())
				printf("system_ini_reload = success!")
			end
		end
	end

	return true
end

function main_menu:OnMenuReloaded()
	self:OnButton_options_clicked()
	self.opt_dlg:OnMenuReloaded()
end
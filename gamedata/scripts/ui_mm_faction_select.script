-- ================================== Modified by Tronex =================================
-- Last modification: 2017/12/19
-- Comments with (-->>) are modified parts
--========================================================================================
--
-- Faction Select on Game Start (ui_mm_faction_select.script)
--	CoC 1.4.22 - DoctorX Questlines 1.21
--
--	Modified by: DoctorX
--	Last revised: December 24, 2016
--
--========================================================================================


-- Faction Select for Call of Chernobyl
-- alundaio
--[[
Copyright (C) 2015 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]


------------------
-- on_game_load()
------------------
local spawn_path, start_pos
local function on_game_load(binder)
	local config = axr_main.config
	if not (config) then
		return
	end

	local se_actor = alife():actor()
	local need_save

	-- IRONMAN MODE
	if (USE_MARSHAL) then
		if (config:r_value("temp","new_game_hardcore_mode",1) == true) then		
			-- shitty way to make a uuid but should be good enough to track the same saves
			alife_storage_manager.get_state().uuid = GAME_VERSION .. "_" .. tostring(math.random(100)) .. tostring(math.random()) .. tostring(math.random(1000))
			config:w_value("temp","new_game_hardcore_mode")
			need_save = true
		end
		if (config:r_value("temp","new_game_survival_mode",1) == true) then		
			alife_storage_manager.get_state().enable_survival_mode = true
			config:w_value("temp","new_game_survival_mode")
			need_save = true
		end
		if (config:r_value("temp","new_game_hardcore_aim_mode",1) == true) then
			alife_storage_manager.get_state().enable_hardcore_ai_aim = true
			config:w_value("temp","new_game_hardcore_aim_mode")
			need_save = true
		end
		if (config:r_value("temp","new_game_azazel_mode",1) == true) then		-->> re-added
			alife_storage_manager.get_state().enable_azazel_mode = true
			config:w_value("temp","new_game_azazel_mode")
			need_save = true
		end
	end

	-- NEW CHARACTER NAME
	local new_character_name = config:r_value("temp","new_game_character_name",3) or ""		
	if (new_character_name and new_character_name ~= "") then
		config:w_value("temp","new_game_character_name")
		need_save = true

		new_character_name = new_character_name:gsub("_"," ")

		local data = stpk_utils.get_actor_data(se_actor)		
		if (data) then			
			data.character_name = new_character_name
			stpk_utils.set_actor_data(data,se_actor)
		end
	end

	-- NEW CHARACTER ICON
	local new_character_icon = config:r_value("temp","new_game_character_icon",3)		
	if (new_character_icon and new_character_icon ~= "") then
		db.actor_binder.character_icon = new_character_icon

		config:w_value("temp","new_game_character_icon")		
		need_save = true
	end

	-- NEW FACTION
	local faction = config:r_value("temp","new_game_faction",3) or ""		

	if (faction and faction ~= "") then
		config:w_value("temp","new_game_faction")		
		need_save = true

		-- Faction Spawn Position
		local start_location = config:r_value("temp","new_game_faction_position")		
		config:w_value("temp","new_game_faction_position")		

		if start_location and start_location ~= "" then
			local loc_ini = ini_file("plugins\\faction_start_locations.ltx")

			start_pos = {}
			table.insert(start_pos,loc_ini:r_float_ex(start_location, "lvid"))
			table.insert(start_pos,loc_ini:r_float_ex(start_location, "gvid"))
			table.insert(start_pos,vector():set(loc_ini:r_float_ex(start_location,"x"),loc_ini:r_float_ex(start_location,"y"),loc_ini:r_float_ex(start_location,"z")))
		else
			spawn_path = patrol("spawn_player_"..faction)
		end


		-- Only give the story quests to factions in this table.
		local story_factions = {
			["csky"] = true,
			["dolg"] = true,
			["ecolog"] = true,
			["freedom"] = true,
			["killer"] = true,
			["stalker"] = true,
		}

		-- Enable the story quests, or disable their components depending on player choice and faction.
		if (config:r_value("temp","new_game_story_mode",1) == true and story_factions[faction] and not has_alife_info("story_mode_disabled")) then		
            task_manager.get_task_manager():give_task("mar_find_doctor_task") -- main quest
			task_manager.get_task_manager():give_task("turn_off_brain_scorcher") -- brain scorcher quest
			task_manager.get_task_manager():give_task("turn_off_brain_machine") -- miracle machine quest
		
		
		-->> if Azazel mode is choosen, disable story and all psi-generators
		elseif (alife_storage_manager.get_state().enable_azazel_mode) then
			-- Compatibility with many story-specific mechanics.
			give_info("story_mode_disabled")
			-- Turn off the Miracle Machine:
			give_info("yan_labx16_switcher_1_off")
			give_info("yan_labx16_switcher_2_off")
			give_info("yan_labx16_switcher_3_off")
			give_info("yan_labx16_switcher_primary_off")

			-- Turn off the Brain Scorcher:
			give_info("bar_deactivate_radar_done")

			-- Turn off the Generators:
			give_info("warlab_deactivate_generators_done")
		
		
		-->> anything outside of Azazel and Story modes will give you Drx Questlines + Turn off psi-generators missions
		else 
			-- Compatibility with many story-specific mechanics.
			give_info("story_mode_disabled")


		-- //////////////////////////////////////////////////////////////////////////////////////////////
		--
			-- Create Start Game Task
			--
			--	Modified by DoctorX
			--	for DoctorX Questlines 1.8
			--	October 26, 2016
		--
		-- ----------------------------------------------------------------------------------------------

			-- Give deactivate Brain Scorcher task:
			if ( faction ~= "monolith" ) then
				task_manager.get_task_manager( ):give_task( "turn_off_brain_scorcher" )
			else

				-- Turn off the Miracle Machine:
				give_info("yan_labx16_switcher_1_off")
				give_info("yan_labx16_switcher_2_off")
				give_info("yan_labx16_switcher_3_off")
				give_info("yan_labx16_switcher_primary_off")

				-- Turn off the Brain Scorcher:
				give_info("bar_deactivate_radar_done")

				-- Turn off the Generators:
				give_info("warlab_deactivate_generators_done")

			end
				
			-- Determine total number of storyline tasks to complete for this game:
			alun_utils.save_var( db.actor, "drx_sl_total_task_number", math.random( 8, 12 ) )  -- Set to range of total meet honcho tasks to complete to finish game
			alun_utils.save_var( db.actor, "drx_sl_current_task_number", 1 )

			-- Determine first honcho to start at:
			local start_game_honcho = ""
			if ( faction == "stalker" ) then
				start_game_honcho = "esc_m_trader"  -- Loner, Sidorovich
			elseif ( faction == "dolg" ) then
				start_game_honcho = "bar_dolg_general_petrenko_stalker"  -- Duty, Petrenko
			elseif ( faction == "freedom" ) then
				start_game_honcho = "mil_smart_terrain_7_7_freedom_leader_stalker"  -- Freedom, Lukash
			elseif ( faction == "csky" ) then
				start_game_honcho = "mar_smart_terrain_base_stalker_leader_marsh"  -- Clear Sky, Cold
			elseif ( faction == "ecolog" ) then
				start_game_honcho = "yan_stalker_sakharov"  -- Ecologist, Sakharov
			elseif ( faction == "killer" ) then
				start_game_honcho = "cit_killers_merc_trader_stalker"  -- Mercenary, Dushman
			elseif ( faction == "army" ) then
				start_game_honcho = "agr_smart_terrain_1_6_near_2_military_colonel_kovalski"  -- Military, Kuznetsov
			elseif ( faction == "bandit" ) then
				start_game_honcho = "zat_b7_bandit_boss_sultan"  -- Bandit, Sultan
			elseif ( faction == "monolith" ) then
				start_game_honcho = "pri_monolith_monolith_trader_stalker"  -- Monolith, Rabbit
			else
				printf( ("DoctorX Questlines is not available for " .. facton .. " !!") )
			end

			-- Build list of available start game versions for start game honcho:
			honcho_start_ltx_file = ini_file("misc\\task_manager.ltx")
			local honcho_start_list = {}
			local honcho_start_id = ""
			local i = 1
			while ( true ) do
				honcho_start_id = ("drx_sl_" .. start_game_honcho .. "_start_game_" .. i)
				if ( honcho_start_ltx_file:section_exist( honcho_start_id ) ) then
					table.insert( honcho_start_list, honcho_start_id )
					i = (i + 1)
				else
					break
				end
			end

			-- Send actor to start game at current honcho:
			if ( #honcho_start_list > 0 ) then
				math.randomseed( device( ):time_global( ) )
				honcho_start_id = honcho_start_list[math.random( #honcho_start_list )]
				printf( ("DRX SL current storyline task: " .. honcho_start_id) )
				alun_utils.save_var( db.actor, "drx_sl_start_task", honcho_start_id )
				alun_utils.save_var( db.actor, "drx_sl_current_honcho", start_game_honcho )
				give_info( ("drx_sl_start_game_" .. start_game_honcho) )  -- (\configs\gameplay\info_portions.xml)
				task_manager.get_task_manager( ):give_task( honcho_start_id )
			else
				printf( ("DoctorX Questlines is not available for " .. start_game_honcho .. " !!") )
			end

			-- \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		end

		config:w_value("temp","new_game_story_mode") -- clear value

		db.actor:set_character_community("actor_"..faction, 0, 0)

		local communities = alun_utils.get_communities_list( )		
		for i, community in pairs( communities ) do
			relation_registry.set_community_goodwill( community, 0, 0 )
		end
		-- money and loadout
		local money_max
		local loadout = config:r_value("temp","new_game_loadout",3)
		if (loadout and loadout ~= "") then
			config:w_value("temp","new_game_loadout")
			need_save = true
			db.actor_binder.character_icon = new_character_icon
			local ini = system_ini()
			local sim = alife()
			local t = alun_utils.str_explode(loadout,",")
			for i=1,#t do
				local kv_pair = alun_utils.str_explode(t[i],"=")
				if (kv_pair[1]) then
					kv_pair[2] = tonumber(kv_pair[2]) or 1
					if (kv_pair[1] == "money") then
						money_max = kv_pair[2]
					elseif (ini:section_exist(kv_pair[1])) then
						--if (utils.is_ammo(kv_pair[1])) then
						--	create_ammo(kv_pair[1],db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0,kv_pair[2])
						--else
							for ii=1,kv_pair[2] do
								sim:create(kv_pair[1],db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0)
							end
						--end
					end
				end
			end
			
			if (axr_main.config:r_value("mm_options","enable_dark_mode",1,false) == true) then		
				sim:create("helm_resp",db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0)
			end
			if (axr_main.config:r_value("mm_options","enable_only_campfire",1,false) == true) then		
				sim:create("matches",db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0)
				sim:create("matches",db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0)
			end
			
		end

		local data = stpk_utils.get_actor_data(se_actor)		
		if (data) then
			if (money_max) then
				data.money = money_max
			end

			data.specific_character = "actor_"..faction		
			stpk_utils.set_actor_data(data,se_actor)
		end
		-- mlr
		if not mlr_utils.load_var('transitions_faction') then		
			mlr_utils.save_var('transitions_faction', faction)
		end
		-- mlr
	end

	if (need_save) then
		config:save()
	end
end

local function actor_on_first_update(binder,delta)
	-- hardcore ai aim		
	local con = get_console()
	if (alife_storage_manager.get_state().enable_hardcore_ai_aim) then		
		con:execute("ai_aim_max_angle 20.0")
		con:execute("ai_aim_min_angle 17.0")
		con:execute("ai_aim_min_speed 2.00")
		con:execute("ai_aim_predict_time 0.28")
	else		
		con:execute("ai_aim_max_angle 0.7854")
		con:execute("ai_aim_min_angle 0.19635")
		con:execute("ai_aim_min_speed 0.24")
		con:execute("ai_aim_predict_time 0.40")
	end

	if (spawn_path) then
		start_pos = {}
		start_pos[1] = spawn_path:level_vertex_id(0)
		start_pos[2] = spawn_path:game_vertex_id(0)
		start_pos[3] = spawn_path:point(0)
	end
	local faction = character_community(db.actor):sub(7)

	-- Survival mode
	if (IsSurvivalMode()) then
		if (faction == "zombied") then		
			game_relations.change_factions_community_num("zombied",0,-5000)
			game_relations.change_factions_community_num("monolith",0,-5000)
		elseif (faction == "monolith") then
			game_relations.change_factions_community_num("zombied",0,-5000)
		end
		if (system_ini():section_exist("survival_squad_"..faction) and start_pos) then
			local sim = alife()
			local squad = sim:create("survival_squad_"..faction,start_pos[3],start_pos[1],start_pos[2])
			if (squad) then
				axr_companions.companion_squads[squad.id] = squad
				squad:create_npc(nil,start_pos[3],start_pos[1],start_pos[2])
				local as
				for k in squad:squad_members() do
					local se_obj = k.object or k.id and sim:object(k.id)
					if (se_obj) then
						game_relations.change_factions_community_num("zombied",k.id,-5000)
						SIMBOARD:setup_squad_and_group(se_obj)

						utils.se_obj_save_var(se_obj.id,se_obj:name(),"companion",true)
						utils.se_obj_save_var(se_obj.id,se_obj:name(),"companion_cannot_dismiss",true)
					end
				end
			end
		end
	end

	if start_pos and #start_pos == 3 then
		ChangeLevel(start_pos[3],start_pos[1],start_pos[2],vector():set(0,0,0))
	end
end

local function actor_on_before_death()
	if not (USE_MARSHAL) then
		return
	end

	local uuid = alife_storage_manager.get_state().uuid
	if not (uuid) then
		return -- not in hardcore mode
	end

	local fs = getFS()
	local flist = fs:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.scoc")
	local f_cnt = flist:Size()

	for	it=0, f_cnt-1 	do
		local file = flist:GetAt(it)
		local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - string.len(".scoc")))

		--printf("file_name = %s",file_name)
		local f = io.open(fs:update_path('$game_saves$', '')..file_name..".scoc","rb")
		if (f) then
			local data = f:read("*all")
			f:close()
			if (data) then
				local decoded = alife_storage_manager.decode(data)
				if (decoded and decoded.uuid == uuid) then
					printf("match found uuid = %s",uuid)
					ui_load_dialog.delete_save_game(file_name)
				end
			end
		end
	end
end

------------------
-- on_game_start()
------------------
function on_game_start()
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end

--------------------------------------------------------------
-- faction_ui
--------------------------------------------------------------

class "faction_ui" (CUIScriptWnd)
function faction_ui:__init(owner) super()
	self.owner = owner

	self.ini = ini_file("plugins\\faction_loadouts.ltx")
	self.selected_faction = nil
	self.f = {"stalker","bandit","csky","dolg","freedom","killer","army","ecolog","monolith"}

	self:InitControls(self.f)
	self:InitCallBacks(self.f)
end

function faction_ui:__finalize()
end

function faction_ui:InitControls(f)
	self:SetWndRect				(Frect():set(0,0,1024,768))
	self:Enable					(true)

	local xml					= CScriptXmlInit()
	xml:ParseFile				("ui_mm_faction_select.xml")

	xml:InitStatic				("background", self)
	self.dialog					= xml:InitStatic("main_dialog:dialog", self)

	-- Menu Quit
	local btn = xml:Init3tButton("main_dialog:btn_back", self.dialog)
	self:Register(btn,"btn_back")

	-- Menu Start Game
	btn = xml:Init3tButton("main_dialog:btn_submit", self.dialog)
	self:Register(btn,"btn_submit")

	-- randomizer
	btn = xml:Init3tButton("main_dialog:btn_rand", self.dialog)
	self:Register(btn,"btn_rand")

	-- character_name edit box
	xml:InitStatic("main_dialog:cap_character_name", self.dialog)
	self.character_name = xml:InitEditBox("main_dialog:input_character_name",self.dialog)
	self:Register(self.character_name,"input_character_name")
	-- Set Default Name
	self.character_name:SetText("Last Day")		--> well...

	-- Faction select menu
	xml:InitStatic("main_dialog:cap_faction_name", self.dialog)
	self.disp_faction_name = xml:InitTextWnd("main_dialog:disp_faction_name", self.dialog)

	local pw
	for i=1,#f do
		self["btn_"..self.f[i]] = xml:Init3tButton("main_dialog:faction_"..f[i],self.dialog)
		self["btn_"..f[i].."_inactive"] = xml:Init3tButton("main_dialog:faction_"..f[i].."_inactive", self.dialog)
		self:Register(self["btn_"..f[i].."_inactive"],"btn_"..f[i].."_inactive_select")
	end

	-- Faction description window
	xml:InitStatic("main_dialog:description:background", self.dialog)
	xml:InitFrame("main_dialog:description:list_frame",self.dialog)
	self.scroll_v = xml:InitScrollView("main_dialog:description:scroll_v", self.dialog)

	-- Icon
	local _st = xml:InitStatic("main_dialog:description:templ_item",nil)	
	self.char_icon = xml:InitStatic("main_dialog:description:char_icon",_st)
	self.char_icon:InitTexture("ui_inGame2_Strelok")
	self.scroll_v:AddWindow(_st, true)

	self.desc_text = xml:InitTextWnd("main_dialog:description:desc_win", nil)
	self.scroll_v:AddWindow(self.desc_text, true)

	self:OnFaction_stalker()

	self.start_list = xml:InitComboBox("main_dialog:list_starts", self.dialog)
	self.start_list:SetAutoDelete(true)
	self:Register(self.start_list, "list_starts")
	self:load_start_positions()

	self.icon_list = xml:InitComboBox("main_dialog:list_icon", self.dialog)
	self.icon_list:SetAutoDelete(true)
	self:Register(self.icon_list, "list_icon")
	self:load_icon_list()

	if (USE_MARSHAL) then		
	
		xml:InitStatic("main_dialog:cap_check_story",self.dialog)
		self.ck_story = xml:InitCheck("main_dialog:check_story",	self.dialog)
		self:Register(self.ck_story,"check_story")
		
		xml:InitStatic("main_dialog:cap_check_hardcore",self.dialog)	-->> re-added
		self.ck_hardcore = xml:InitCheck("main_dialog:check_hardcore",	self.dialog)
		self:Register(self.ck_hardcore,"check_hardcore")
		
		xml:InitStatic("main_dialog:cap_check_azazel_mode",self.dialog)		-->> re-added
		self.ck_azazel_mode = xml:InitCheck("main_dialog:check_azazel_mode",	self.dialog)
		self:Register(self.ck_azazel_mode,"check_azazel_mode")
		
		xml:InitStatic("main_dialog:cap_check_survival",self.dialog)		-->> re-added
		self.ck_survival = xml:InitCheck("main_dialog:check_survival",	self.dialog)
		self:Register(self.ck_survival,"check_survival")
	
		self.ck_states = { 	["ck_survival"] = false,
							["ck_hardcore"] = false,
							["ck_hardcore_aim"] = false ,
							["ck_azazel_mode"] = false ,
							["ck_story"] = false
		}
	end
	
	-- Hint Window		-->> re-added
	self.hint_wnd = xml:InitFrame("hint_wnd:background",self)
	self.hint_wnd:SetAutoDelete(false)
	self.hint_wnd_text = xml:InitTextWnd("hint_wnd:text",self.hint_wnd)
	self.hint_wnd:Show(false)
	
	-- Message Window 		-->> re-added
	self.msg_wnd = xml:InitFrame("hint_wnd:background",self)
	self.msg_wnd:SetAutoDelete(false)
	self.msg_wnd_text = xml:InitTextWnd("hint_wnd:text",self.msg_wnd)
	self.msg_wnd_text:SetTextAlignment(2)
	
	self.msg_wnd:Show(false)
	self.msg_wnd:SetColor(GetARGB(255,0,0,0))
end

function faction_ui:InitCallBacks(f)
	self:AddCallback("btn_rand", ui_events.BUTTON_CLICKED, self.OnRandomize, self)
	self:AddCallback("btn_back", ui_events.BUTTON_CLICKED, self.OnQuit, self)
	self:AddCallback("btn_submit", ui_events.BUTTON_CLICKED, self.OnStartGame, self)
	self:AddCallback("list_factions", ui_events.LIST_ITEM_SELECT, self.OnSelectFactionList,	self)

	self:AddCallback("list_starts", ui_events.LIST_ITEM_SELECT, self.OnSelectStartLocation, self)
	self:AddCallback("list_icon", ui_events.LIST_ITEM_SELECT, self.OnSelectPortrait, self)

	self:AddCallback("check_story", ui_events.BUTTON_CLICKED, self.OnCheckSetStory, self)	-->> modified
	--self:AddCallback("check_survival", ui_events.BUTTON_CLICKED, self.OnCheckSet, self)		
	--self:AddCallback("check_hardcore", ui_events.BUTTON_CLICKED, self.OnCheckSet, self)		
	--self:AddCallback("check_hardcore_aim", ui_events.BUTTON_CLICKED, self.OnCheckSet, self)		
	self:AddCallback("check_azazel_mode", ui_events.BUTTON_CLICKED, self.OnCheckSetAzazel, self)	-->> Added

	for i=1,#f do
		self:AddCallback("btn_"..f[i].."_inactive_select", ui_events.BUTTON_CLICKED, self["OnFaction_"..f[i]], self)
	end
end

-------------------------------------------------------------------- start
function faction_ui:Update()		-->> added
	CUIScriptWnd.Update(self)
	-- Warning messages timer 
	if (self.msg_wnd_timer and time_global() > self.msg_wnd_timer) then 
		self.msg_wnd_timer = nil
		self.msg_wnd:Show(false)
	end
	
	for ck_name,v in pairs(self.ck_states) do 
		if (self[ck_name] and self[ck_name]:IsCursorOverWindow()) then
			self:SetHint(game.translate_string("st_mm_"..ck_name.."_desc"))
			return
		end
	end
	self.hint_wnd:Show(false)
end 

function faction_ui:SetMsg(text,tmr)		-->> added
	if (text == "") then 
		return 
	end
	self.msg_wnd:Show(true)
	self.msg_wnd_text:SetText(text)
	self.msg_wnd_text:AdjustHeightToText()
	self.msg_wnd_text:SetWndSize(vector2():set(820,self.msg_wnd_text:GetHeight()+10))
	self.msg_wnd_text:SetWndPos(vector2():set(0,20))
	
	self.msg_wnd:SetWndSize(vector2():set(820,self.msg_wnd_text:GetHeight()+44))
	self.msg_wnd:SetWndPos(vector2():set(0,80))

	self.msg_wnd_timer = time_global() + 1000*tmr
end

function faction_ui:SetHint(text,pos)		-->> added
	if (text == "") then
		return
	end
	self.hint_wnd:Show(true)
	self.hint_wnd_text:SetText(text)
	self.hint_wnd_text:AdjustHeightToText()
	self.hint_wnd:SetWndSize(vector2():set(self.hint_wnd:GetWidth(),self.hint_wnd_text:GetHeight()+44))
	
	pos = pos or GetCursorPosition()
	pos.y = pos.y - self.hint_wnd:GetHeight()
	pos.x = pos.x - self.hint_wnd:GetWidth()
	self.hint_wnd:SetWndPos(pos)
	
	FitInRect(self.hint_wnd,Frect():set(0,0,1024,768),0,100)
end

function faction_ui:OnCheckSetStory()		-->> added, checking Story Mode will uncheck Azazel Mode
	self.ck_azazel_mode:SetCheck(false)
	self.ck_states["ck_azazel_mode"] = false
end

function faction_ui:OnCheckSetAzazel()		-->> added, checking Azazel Mode will uncheck Story Mode
	self.ck_story:SetCheck(false)
	self.ck_states["ck_story"] = false
end

function faction_ui:OnSelectStartLocation()
	self.start_location = self.start_table[self.start_list:CurrentID()]
end

function faction_ui:OnSelectPortrait()
	self.char_icon:InitTexture(self.icon_list:GetText())
end

function faction_ui:load_start_positions()
	self.start_list:ClearList()
	self.start_table = {}

	local loc_ini = ini_file("plugins\\faction_start_locations.ltx")

	local n = loc_ini:line_count(self.selected_faction.."_start_locations") or 0
	for i=0, n-1 do
		local result, id, value = loc_ini:r_line(self.selected_faction.."_start_locations",i,"","" )
		table.insert(self.start_table,id)
	end
	self.start_location = self.start_table[math.random(1,n)]
	self.start_list:AddItem(game.translate_string("st_mm_faction_random_location"), 0)
	for i=1,#self.start_table do
		self.start_list:AddItem(game.translate_string("ui_st_"..self.start_table[i]),i)
	end
	self.start_list:SetText(game.translate_string("st_mm_faction_random_location"))
end

function faction_ui:load_icon_list()
	local loc_ini = ini_file("plugins\\faction_portraits.ltx")
	local def_icon = "ui_inGame2_Strelok"

	self.icon_list:ClearList()
	self.icon_list:AddItem(def_icon)		
	self.icon_table = empty_table(self.icon_table)		

	local section = self.selected_faction.."_portraits"
	local n = loc_ini:section_exist(section) and loc_ini:line_count(section) or 0
	for i=0, n-1 do	
		local result, id, value = loc_ini:r_line(section,i,"","" )
		self.icon_list:AddItem(id,i)
		table.insert(self.icon_table,id)
	end

	self.icon_list:SetText(def_icon)
	self.char_icon:InitTexture(def_icon)
end

function faction_ui:OnCheckSet()		
	local ck = nil
	local value = nil
	for k,v in pairs(self.ck_states) do
		if (self[k] and self[k]:GetCheck() ~= v) then
			self.ck_states[k] = self[k]:GetCheck()
			ck = k
			value = self[k]:GetCheck()
		end
	end

	if (self[ck] and self[ck]:GetCheck()) then
		self.desc_text:SetText(game.translate_string("st_mm_"..ck.."_desc"))
	end
end

function faction_ui:OnRandomize()
	local faction = random_choice("stalker","bandit","csky","ecolog","army","monolith","dolg","freedom","killer")
	self:OnFactionSelect(faction)

	local new_name = ""

	if (faction == "army") then 
		new_name = random_choice("Pvt.","Sr. Pvt.","Jr. Sgt.","Sgt.","Sr. Sgt.","Mr. Sgt.","Jr. Lt.","Lt.","Sr. Lt.","Cpt.") .. " "
	end 
	local first_name = {		
				"Aleksandr","Alex","Alexey","Anatoly","Andrey","Andryukha","Anton","Antonio","Arkasha","Artem","Arthur",
				"Bodya","Bohdan","Bohdan","Borka","Borya","Boryan",
				"Danko","Danya","Dennis","Dima","Dimitri","Dimka","Dimon","Dimukha","Dmitro","Dmitry","Dumb",
				"Edik","Egor","Egorka","Evgeniy",
				"Fedka","Fedor","Fedya","Felka","Filka","Filya","Fima","Fimka",
				"Gena","Genka","George","Gleb","Gosha","Grisha","Grishka","Grishka","Grishko","Grishko",
				"Igorek","Ilya","Ilyukha","Ivan",
				"Kiryukha","Kolya","Kolyan","Konstantin","Kostik","Kostya","Kostyan",
				"Lekha","Lenya","Lenya","Leshka","Leva","Lyonka",
				"Mark","Matvei","Max","Mikha","Mikhal","Mikhas","Misha","Mishka","Mitka","Mitya",
				"Nik","Nikita","Nikolov","Novoska","Nickels",
				"Oleg","Onion","Orion",
				"Pasha","Pashka","Pavlukha","Petka","Petya",
				"Roman","Rusik","Ruskie",
				"Sanek","Sanek","Sanya","Sashok","Semen","Semyon","Serega","Sergey","Seva","Sevka","Shurik","Shurik","Slava","Slavik","Stepa","Stepan","Stepka","Stepukha",
				"Temka","Tima","Timka","Timokha","Tokha","Tolik","Tolyan",
				"Vadik","Vadim","Vadya","Vadya","Valera","Valik","Vanka","Vanya","Vasek","Vaska","Vasko","Vasya","Vasyan","Veniamin","Venya","Vetal","Vitalik","Vitaly","Vitka","Vitya","Vityukha","Vlad","Vladimir","Vova","Vovan","Vovka",
				"Yara","Yarik","Yasha","Yashka","Yashka","Yuras","Yuri","Yurik","Yurka","Yurko",
				"Zheka","Zhenka","Zhenya","Zhora","Zhorka"
		}	
	new_name = new_name .. first_name[math.random(1,#first_name)] .. " "
	
	-- last name table split because it's too large
	if ((math.random(1,100)/100) < 0.5) then
		local last1 = {
			"Abdurakhmanov","Ace","Alferov","Altynnik","Andreev","Andreychuk","Andruschenko","Anisiev","Antelope","Antipin","Ardashev","Arsonist","Artist","Aspic",
			"Babich","Balan","Balitsky","Banana","Banker","Baranov","Baranovsky","Baron","Barsak","Bashakov","Bashmakov","Baul","Beast","Beaver","Bedbug","Belyavin","Berserk","Beshevly","Binoev","Biscuit","Bison","Blind","Bling-bling","Blinov","Boa","Boar","Bobrov","Bogdanov","Bogomolov","Boichenko","Boiko","Boldeskul","Bolt","Bondarev","Borisov","Bosun","Boulder","Bourbon","Bourgeois","Brich","Brigand","Broken","Bronshtein","Bruise","Bulldog","Buryak","Butcher","Butt","Butterfingers","Buturin","Byalo",
			"Canary","Champ","Chapai","Charcoal","Chauffeur","Cheat","Chemist","Chernodub","Chili","Chirikov","Chisel","Coach","Conman","Connoisseur","Corpse","Counselor","Count","Cranky","Cripple","Crony","Crooked","Cross","Crosstie","Crowbar","Crucian",
			"Dead Duck","Deadbeat","Defunct","Degree","Denisenko","Dombrik","Dotsenko","Dovgalyuk","Drozdush","Drum","Dubenchuk","Dudorov","Duka","Dumko","Dunaev","Dyakonov","Dyklov","Dynamite",
			"Ears","Efremov","Erofeev","Erokhin","Executioner",
			"Fadeev","Fatso","Feigelman","Fiend","Fierce","Fist","Flop","Fubar","Futzin",
			"Galkin","Gangrene","Gangster","Ganzyuk","Garkovenko","Garkusha","Gatzula","Genghis","Georgov","Geshkenbein","Ghoul","Glebovsky","Glitch","Gnatyuk","Goblin","Godfather","Goncharenko","Gordienko","Gorlevoy","Gorokhin","Goryunov","Grabber","Grater","Gray","Grebenko","Greyhound","Grindstone","Grischuk","Grishachev","Gritzaenko","Gritzay","Gritzenkov","Gubar","Guerilla","Gunko","Gurevich",
			"Hacker","Hipster","Hitman","Hobo","Homeboy","Hotshot","Humpback",
			"Ignatenko","Ischuk","Ivanov","Ivchenko","Izhenko",
			"Jackstraw","Jester","Jiggers","Joint","Junk",
			"Kabanov","Kamikaze","Kandybabko","Kapuka","Kapustyanko","Katz","Kazakov","Kazantsev","Khaladze","Khan","Kicker","Kikabidze","Kireev","Koev","Kolontar","Kolontarev","Kondratenko","Korkin","Korneev","Koschei","Kovalchuk","Kozlov","Kravchenko","Krivda","Krivokhatsky","Kryga","Kucheruk","Kulchistky","Kulchitsky","Kuntsev","Kurvitz","Kushnarev","Kuzmich","Kuznetsov","Kuzyakin",

		}	
		new_name = new_name .. last1[math.random(1,#last1)]
	else
		local last2 = {
			"Lame","Larin","Lavrik","Lavrov","Ledentsov","Leech","Lethal","Lisichansky","Litvin","Livshits","Loaf","Local","Long-John","Loudmouth","Lymarenko",
			"Makarenko","Maltsev","Mamaev","Maniac","Manko","Mayhem","Mazepa","Merzlayev","Messenger","Met","Milchenko","Mironov","Mironyuk","Miser","Mohrer","Monocle","Moor","Moose","Mostovoi","Mukhamedov","Muntyan","Myskov",
			"Nark","Navrotsky","Nepritsky","Nickel","Nikanorov","Nikeshin","Nikulin","Ninja","Nordiev","Nosan","Nickels",
			"Oganesyan","Opolev","Orlevich","Orlov","Ox",
			"Pacifist","Panadol","Papa","Pariah","Patty","Peddler","Percher","Petkevich","Petrenko","Petrov","Pigmy","Pimp","Pirate","Piston","Player","Plokhenko","Podyachev","Polyanin","Poplavsky","Popov","Portnykh","Prasolov","Prince","Prokopenko","Proskurin","Protsenko","Prudov","Psycho","Puchek","Punk","Pustovar",
			"Rabinovich","Radkevich","Rambo","Rascal","Rat","Ravioli","Razor","Reefer","Rezun","Robust","Rodnyansky","Rogoza","Rotan","Rotten","Rublev","Rudik","Rusanov","Rychagirsky",
			"Sagitov","Savage","Savchenko","Savchuk","Scherbin","Screw","Sedykh","Sereda","Shaven","Shifter","Shilov","Shiv","Shortstop","Shovel","Sidorenko","Sidorov","Sinaev","Sinitzyn","Siniy","Skameika","Skew","Slasher","Slime","Slutsky","Smelov","Smoly","Snot","Sock","Sorokin","Sparrow","Spike","Spirin","Spy","Squint","Squire","Stain","Statzura","Steklov","Stepanenko","Stepchin","Strangler","Stud","Sturdy","Stychinsky","Sviridov","Sykula",
			"Tadpole","Tails","Tar","Tarnavsky","Tatarchuk","Terminator","Thief","Tightwad","Timchuk","Torn","Toupee","Tour Guide","Tramp","Trombone","Trump","Turd","Tyrant",
			"Undertaker","Unorthodox",
			"Valentinov","Vasilevich","Vasiliev","Veselov","Veteran","Vinogradov","Volanchuk","Volodar","Voloshin","Vorokhaev","Vorontsov","Vovnenko","Vyushinsky",
			"Warlock","Warrior","Woodpecker",
			"Zabyagoda","Zagorodnyuk","Zaikin","Zakharin","Zakharov","Zamosenchuk","Zarubin","Zhabenko","Zhmyev","Zhurakovsky","Zinoviev","Zolotar","Zozo","Zubarev","Zubkov","Zvonnitsky"
		}	
		new_name = new_name .. last2[math.random(1,#last2)]
	end

	self.character_name:SetText(new_name)

	-- set random portrait
	if (self.icon_list and self.icon_table) then
		local t = self.icon_table
		self.icon_list:SetText(t[math.random(#t)])
		self.char_icon:InitTexture(self.icon_list:GetText())
	end
end

-------------------------------------------------------------------------------------------- end
function faction_ui:OnFactionSelect(faction)
	local gs = game.translate_string
	local desc = gs("st_faction_"..faction.."_desc") .. "\\n \\n"

	desc = desc .. "%c[0,245,245,220]Relations:\\n"

	local t = {"stalker","bandit","csky","ecolog","army","monolith","dolg","freedom","killer"}
	for i=1,#t do
		if not (t[i] == faction) then
			local v = relation_registry.community_relation("actor_"..faction, t[i])
			if (v >= 1000) then
				desc = desc .. "   %c[0,51,255,51]".. gs("st_faction_"..t[i]) .. "\\n"
			elseif (v <= -1000) then
				desc = desc .. "   %c[0,255,0,0]" .. gs("st_faction_"..t[i]) .. "\\n"
			else
				desc = desc .. "   %c[0,255,255,51]" .. gs("st_faction_"..t[i]) .. "\\n"
			end
		end
	end

	local sys_ini = system_ini()

	desc = desc .. "\\n \\n"
	if axr_main.config:r_value("temp","custom_loadout",1) then
		self.default_loadout = alun_utils.collect_sections(self.ini,{"custom"})
		local weapons = alun_utils.str_explode(self.default_loadout["weapons"],",")
		for _, w in ipairs(weapons) do
			if sys_ini:section_exist(w) then
				self.default_loadout[w] = 1
				local ammo = sys_ini:r_string_ex(w,"ammo_class")
				ammo = alun_utils.str_explode(ammo,",")
				ammo = ammo[math.random(#ammo)]
				self.default_loadout[ammo] = 4
			end
		end
	else
	-- Choose from 10 templates instead of 5
		self.default_loadout = alun_utils.collect_sections(self.ini,{faction,math.random(1,10)})
	-- Spawn primary and secondary weapons, including ammo boxes for each
		local primary = alun_utils.collect_section(self.ini,"primary")
		primary = primary[math.random(#primary)]
		local secondary = alun_utils.collect_section(self.ini,"secondary")
		secondary = secondary[math.random(#secondary)]

		local ammop = sys_ini:r_string_ex(primary,"ammo_class")
		ammop = alun_utils.str_explode(ammop,",")
		ammop = ammop[math.random(#ammop)]
		local ammos = sys_ini:r_string_ex(secondary,"ammo_class")
		ammos = alun_utils.str_explode(ammos,",")
		ammos = ammos[math.random(#ammos)]

		self.default_loadout[primary] = 1
		self.default_loadout[secondary] = 1
		self.default_loadout[ammop] = 4 
		self.default_loadout[ammos] = 2
	end

	local money = alun_utils.str_explode(self.default_loadout["money"],",")
	money = money[math.random(#money)]
	self.default_loadout["money"] = money

	desc = desc .. "%c[0,245,245,220]Money: %c[0,188,210,238]".. self.default_loadout["money"] .. " RU\\n \\n"
	desc = desc .. "%c[0,245,245,220]Equipment:\\n"

	self.loadout_str = strformat("money = %s,",self.default_loadout["money"])

	for section, amt in pairs(self.default_loadout) do
		if (section ~= "weapons" and section ~= "money" and sys_ini:section_exist(section)) then
			local itm_name = gs(sys_ini:r_string_ex(section,"inv_name") or "")
			amt = amt == "" and {1} or alun_utils.str_explode(amt,",")
			amt = tonumber(amt[math.random(#amt)]) or 0
			if (amt > 0) then
				if (amt > 1) then
					if (utils.is_ammo(section)) then
						local box_size = (sys_ini:r_float_ex(section, "box_size") or 1) * amt
						desc = desc .. "   %c[0,188,210,238]".. itm_name .. " %c[0,245,245,220]x"..tostring(box_size).."\\n"
					else
						desc = desc .. "   %c[0,188,210,238]".. itm_name .. " %c[0,245,245,220]x"..tostring(amt).."\\n"
					end
					self.loadout_str = strformat("%s %s = %s,",self.loadout_str,section,amt)
				else
					if (utils.is_ammo(section)) then
						local box_size = (sys_ini:r_float_ex(section, "box_size") or 1) * amt
						desc = desc .. "   %c[0,188,210,238]".. itm_name .. " %c[0,245,245,220]x"..tostring(box_size).."\\n"
					else
						desc = desc .. "   %c[0,188,210,238]".. itm_name .."\\n"
					end
					self.loadout_str = strformat("%s %s = %s,",self.loadout_str,section,amt)
				end
			end
		end
	end

	self.selected_faction = faction

	for i=1,#self.f do
		self["btn_"..self.f[i]]:Show(false)
		self["btn_"..self.f[i].."_inactive"]:Show(true)
	end

	if (self["btn_".. faction]) then
		self["btn_"..faction]:Show(true)
		self["btn_"..faction.."_inactive"]:Show(false)
	end

	self.disp_faction_name:SetText(gs("st_faction_"..faction))
	self.desc_text:SetText(desc)

	if self.start_list then
		self:load_start_positions()
	end

	if self.icon_list then
		self:load_icon_list()
	end
end

function faction_ui:OnFaction_stalker()
	self:OnFactionSelect("stalker")
end
function faction_ui:OnFaction_bandit()
	self:OnFactionSelect("bandit")
end
function faction_ui:OnFaction_csky()
	self:OnFactionSelect("csky")
end
function faction_ui:OnFaction_dolg()
	self:OnFactionSelect("dolg")
end
function faction_ui:OnFaction_freedom()
	self:OnFactionSelect("freedom")
end
function faction_ui:OnFaction_killer()
	self:OnFactionSelect("killer")
end
function faction_ui:OnFaction_army()
	self:OnFactionSelect("army")
end
function faction_ui:OnFaction_ecolog()
	self:OnFactionSelect("ecolog")
end
function faction_ui:OnFaction_monolith()
	self:OnFactionSelect("monolith")
end
function faction_ui:OnFaction_zombied()
	self:OnFactionSelect("zombied")
end

function faction_ui:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if res==false then
		local bind = dik_to_bind(dik)
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				self:OnQuit()
			elseif (dik == DIK_keys.DIK_Z) then
				self:OnFaction_zombied()
			elseif (dik == DIK_keys.DIK_R) then
				self:OnRandomize()
				self:OnStartGame()
			end
		end
	end
	return res
end

function faction_ui:OnQuit()
	self.owner:ShowDialog(true)
	self.owner:Show(true)
	self:HideDialog()
	self:Show(false)
end

function faction_ui:OnStartGame()
	-- start game anyway if no config or axr_main script
	if not (axr_main and axr_main.config) then
		self.owner:StartGame()
		return
	end

	local character_name = self.character_name:GetText()
	if (character_name == "") then
		-- Require a name to be entered.
		return
	end

	if (self.start_list:CurrentID() <= 0) then
		local index = math.random(1,#self.start_table)
		self.start_location = self.start_table[index]
--		self.start_list:SetText(game.translate_string("ui_st_"..self.start_table[index]))
	end

	axr_main.config:w_value("temp","new_game_hardcore_mode",self.ck_hardcore and self.ck_hardcore:GetCheck() and true or nil) -->> modified, Ironman will be enabled from new-game menu
	axr_main.config:w_value("temp","new_game_story_mode",self.ck_story and self.ck_story:GetCheck() and true or nil)
	axr_main.config:w_value("temp","new_game_azazel_mode",self.ck_azazel_mode and self.ck_azazel_mode:GetCheck() and true or nil)	-->> re-added
	axr_main.config:w_value("temp","new_game_survival_mode",self.ck_survival and self.ck_survival:GetCheck() and true or nil)
	axr_main.config:w_value("temp","new_game_hardcore_aim_mode",self.ck_hardcore_aim and self.ck_hardcore_aim:GetCheck() and true or nil)
	
	axr_main.config:w_value("temp","new_game_faction",self.selected_faction or nil)
	axr_main.config:w_value("temp","new_game_faction_position",self.start_location or nil)
	axr_main.config:w_value("temp","new_game_loadout",self.loadout_str or nil)
	axr_main.config:w_value("temp","new_game_character_icon",self.icon_list:GetText())

	-- Store info in temp config so it can be read on next game load
	axr_main.config:w_value("temp","new_game_character_name", character_name:gsub(" ","_") )
	axr_main.config:save()

	-- Start the game
	self.owner:StartGame()
end

